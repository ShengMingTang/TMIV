black:
  stage: check
  image:
    name: cytopia/black:latest
    entrypoint: ["/bin/sh", "-c"]
  tags: [ linux ]
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - "**/*.py"
        - .gitlab/ci/checks.yml
  script:
    - python3 -m black --check --diff scripts/

pytest:
  stage: check
  image: python:latest
  tags: [ linux ]
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - "**/*.py"
        - .gitlab/ci/checks.yml
  cache:
    paths:
      - .cache/pip
  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  before_script:
    - python3 -m pip install pytest pyfakefs
  script:
    - pytest scripts

clang-format:
  stage: check
  image: cbachhuber/clang:12
  tags: [ linux ]
  script:
    - ./scripts/check/clang_format.py
    - git diff
    - if [[ $(git diff) ]]; then echo "Formatting is wrong. Please see above."; return 1; fi

no multi-line commit messages:
  stage: check
  image:
    name: cbachhuber/clang:12
  tags: [ linux ]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  script:
    - git fetch origin $CI_DEFAULT_BRANCH:main
    - NUM_COMMIT_MESSAGE_LINES=$(git log --pretty=format:%B main..HEAD | sed '/^\s*$/d' | grep -c "")
    - NUM_COMMITS=$(git rev-list --count main..HEAD)
    - if [[ "$NUM_COMMIT_MESSAGE_LINES" -ne "$NUM_COMMITS" ]]; then echo "Merge requests with multi-line commit messages result in a wrong commit message on main. Please rewrite the commit message(s) to have only one line."; fail; fi

Code quality rules:
  stage: check
  image: cbachhuber/clang:12
  tags: [ linux ]
  script:
    - ./scripts/check/code_quality_rules.py
    - git diff
    - if [[ $(git diff) ]]; then echo "At least one code quality rule check has triggered. Please see above."; return 1; fi
